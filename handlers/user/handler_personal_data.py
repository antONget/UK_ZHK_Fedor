from aiogram import F, Router, Bot
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter

from keyboards.start_keyboard import keyboard_start
from keyboards.user.keyboard_personal_data import keyboards_get_contact
import database.requests as rq
from utils.error_handling import error_handler
from config_data.config import Config, load_config
from filter.filter import validate_russian_phone_number

import logging
from datetime import datetime

config: Config = load_config()
router = Router()


class PersonalData(StatesGroup):
    fullname = State()
    personal_account = State()
    phone = State()


@router.message(F.text, StateFilter(PersonalData.fullname))
@error_handler
async def get_full_name(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'get_full_name: {message.chat.id}')
    full_name = message.text
    await rq.set_user_fullname(tg_id=message.from_user.id,
                               fullname=full_name)
    await message.answer(text=f'–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞')
    await state.set_state(state=PersonalData.personal_account)


@router.message(F.text, StateFilter(PersonalData.personal_account))
@error_handler
async def get_personal_account(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –ü–æ–ª—É—á–∞–µ–º –ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'get_personal_account: {message.chat.id}')
    personal_account = message.text
    await rq.set_user_personal_account(tg_id=message.from_user.id,
                                       personal_account=personal_account)
    await message.answer(text=f'–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–æ–π'
                              f' "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è ‚òéÔ∏è" —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ–π –Ω–∏–∂–µ üëá',
                         reply_markup=keyboards_get_contact())
    await state.set_state(state=PersonalData.phone)


@router.message(StateFilter(PersonalData.phone))
async def get_phone_user(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏ –∑–∞–Ω–æ—Å–∏–º –µ–≥–æ –≤ –ë–î
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'get_phone_user: {message.chat.id}')
    # –µ—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—Å—è"
    if message.contact:
        phone = str(message.contact.phone_number)
    # –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    else:
        phone = message.text
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –Ω–µ –≤–∞–ª–∏–¥–µ–Ω –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ
        if not validate_russian_phone_number(phone):
            await bot.edit_message_text(text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
            return
    await rq.set_user_phone(tg_id=message.from_user.id,
                            phone=phone)
    await state.set_state(state=None)
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª',
                         reply_markup=keyboard_start(role=rq.UserRole.user))
